PSEUDOCODE/SAMPLE CODE:PRIMâ€™S ALGORITHM:MINIMUM SPANNING TREE

#include<stdlib.h>
#include <iostream>
#include <fstream>
using namespace std;
class graph
{
 int G[20][20];
 int n;
public:
 graph()
 { n=0;}
 void readgraph();
 void printgraph();
 int prims(graph &);
};
void graph:: readgraph()
{
int i,j,vi,vj,no_of_edges,weight;
cout<<"\nEnter no. of vertices :";
cin>>n;
//while(getch()=='\n');
cout<<"\nEnter no of edges :";
1
2 3 4 \0
1 5 \0
1 6 \0
2 7 \0
3 7 \0
5 6 \0
3
2
 4
5
 6
 headlist[7]
 7
1 \0

cin>>no_of_edges;
for(i=0;i<n;i++) //Initialize the adjacency matrix
 for(j=0;j<n;j++)
 G[i][j]=0;
//while(getch()=='\n');
cout<<"\nEnter the list of edges : ";
for(i=0;i<no_of_edges;i++)
{
// while(getch()=='\n');
 cout<<"\nEnter an edge (u,v,weight) :";
 cin>>vi;
 //while(getch()=='\n');
 cin>>vj;
// while(getch()=='\n');
 cin>>weight;
 G[vi][vj]=G[vj][vi]=weight;
}}
void graph::printgraph()
{
int i,j;
cout<<"\nList of edges in the spanning tree: ";
for(i=0;i<n-1;i++)//Scan the upper triangle of the adjacency matrix
 for(j=i+1;j<n;j++)
 if(G[i][j]!=0)
 cout<<"\n(u,v,wight)=("<<i<<","<<j<<","<<G[i][j]<<")";
}
int graph::prims(graph &spanning)
{
int cost[20][20];
int infinity=999;
int u,v,min_distance,distance[20],from[20];
int visited[20],no_of_edges,i,min_cost,j;
// create cost[][] matrix and empty spanning[][]
// Matrix spanning is for storing of spanning tree for(i=0;i<n;i++)
for(i=0;i<n;i++)
 for(j=0;j<n;j++)
 {
 if(G[i][j]==0)
 cost[i][j]=infinity;
 else
 cost[i][j]=G[i][j];
 spanning.G[i][j]=0; }
// initialise visited[],distance[] and from[]
distance[0]=0;visited[0]=1;
for(i=1;i<n;i++){
 distance[i]=cost[0][i];
 from[i]=0;
 visited[i]=0;
}
min_cost=0; //cost of spanning tree
no_of_edges=n-1; //no.of edges to be added
while(no_of_edges>0){
//find the vertex at minimum distance from the tree
 min_distance=infinity;
 for(i=1;i<n;i++)
 if(visited[i]==0 && distance[i]<min_distance)
 {
 v=i;
 min_distance=distance[i];
 }
 u=from[v];
 // insert the edge in spanning tree
 spanning.G[u][v]=distance[v];
 spanning.G[v][u]=distance[v];
 no_of_edges--;
 visited[v]=1;
 // update the distance [] array
 for(i=1;i<n;i++)
 if(visited[i]==0 && cost[i][v] < distance[i]){
 distance[i]=cost[i][v];
 from[i]=v; }
 min_cost=min_cost+cost[u][v];}
spanning.n=n;
return(min_cost);
}
int main()
{
graph g1,spanning;
g1.readgraph();
int total_cost=g1.prims(spanning);
cout<<"\nspanning tree matrix : \n";
spanning.printgraph();
cout <<"\nTotal cost of spanning tree="<<total_cost;
}
